(library (s3.init)
  (export initial-environment)
  (import (rnrs)
          (s3.env))

  (define *global-env* '())

  (define (define-global name value)
    (set! *global-env*
          (push-env name 'global value *global-env*)))

  (define (define-globals)

    ;; (rnrs base) library

    (define-global 'eqv? eqv?)          ; 11.5 Equivalence predicates
    (define-global 'eq? eq?)
    (define-global 'equal? equal?)

    (define-global 'procedure? procedure?) ; 11.6 Procedure predicate

    (define-global 'number? number?)    ; 11.7 Numbers
    (define-global 'complex? complex?)
    (define-global 'real? real?)
    (define-global 'rational? rational?)
    (define-global 'integer? integer?)
    (define-global 'real-valued? real-valued?)
    (define-global 'rational-valued? rational-valued?)
    (define-global 'integer-valued? integer-valued?)
    (define-global 'exact? exact?)
    (define-global 'inexact? inexact?)
    (define-global 'inexact inexact)
    (define-global 'exact exact)
    (define-global '= =)
    (define-global '< <)
    (define-global '> >)
    (define-global '<= <=)
    (define-global '>= >=)
    (define-global 'zero? zero?)
    (define-global 'positive? positive?)
    (define-global 'negative? negative?)
    (define-global 'odd? odd?)
    (define-global 'even? even?)
    (define-global 'finite? finite?)
    (define-global 'infinite? infinite?)
    (define-global 'nan? nan?)
    (define-global 'max max)
    (define-global 'min min)
    (define-global '+ +)
    (define-global '* *)
    (define-global '- -)
    (define-global '/ /)
    (define-global 'abs abs)
    (define-global 'div-and-mod div-and-mod)
    (define-global 'div div)
    (define-global 'mod mod)
    (define-global 'div0-and-mod0 div0-and-mod0)
    (define-global 'div0 div0)
    (define-global 'mod0 mod0)
    (define-global 'gcd gcd)
    (define-global 'lcm lcm)
    (define-global 'numerator numerator)
    (define-global 'denominator denominator)
    (define-global 'floor floor)
    (define-global 'ceiling ceiling)
    (define-global 'truncate truncate)
    (define-global 'round round)
    (define-global 'rationalize rationalize)
    (define-global 'exp exp)
    (define-global 'log log)
    (define-global 'sin sin)
    (define-global 'cos cos)
    (define-global 'tan tan)
    (define-global 'asin asin)
    (define-global 'acos acos)
    (define-global 'atan atan)
    (define-global 'sqrt sqrt)
    (define-global 'exact-integer-sqrt exact-integer-sqrt)
    (define-global 'expt expt)
    (define-global 'make-rectangular make-rectangular)
    (define-global 'make-polar make-polar)
    (define-global 'real-part real-part)
    (define-global 'imag-part imag-part)
    (define-global 'magnitude magnitude)
    (define-global 'angle angle)
    (define-global 'number->string number->string)
    (define-global 'string->number string->number)

    (define-global 'not not)            ; 11.8 Booleans
    (define-global 'boolean? boolean?)
    (define-global 'boolean=? boolean=?)

    (define-global 'pair? pair?)        ; 11.9 Pairs and Lists
    (define-global 'cons cons)
    (define-global 'car car)
    (define-global 'cdr cdr)
    (define-global 'caar caar)
    (define-global 'cadr cadr)
    (define-global 'cdar cdar)
    (define-global 'cddr cddr)
    (define-global 'caaar caaar)
    (define-global 'caadr caadr)
    (define-global 'cadar cadar)
    (define-global 'caddr caddr)
    (define-global 'cdaar cdaar)
    (define-global 'cdadr cdadr)
    (define-global 'cddar cddar)
    (define-global 'cdddr cdddr)
    (define-global 'caaaar caaaar)
    (define-global 'caaadr caaadr)
    (define-global 'caadar caadar)
    (define-global 'caaddr caaddr)
    (define-global 'cadaar cadaar)
    (define-global 'cadadr cadadr)
    (define-global 'caddar caddar)
    (define-global 'cadddr cadddr)
    (define-global 'cdaaar cdaaar)
    (define-global 'cdaadr cdaadr)
    (define-global 'cdadar cdadar)
    (define-global 'cdaddr cdaddr)
    (define-global 'cddaar cddaar)
    (define-global 'cddadr cddadr)
    (define-global 'cdddar cdddar)
    (define-global 'cddddr cddddr)
    (define-global 'null? null?)
    (define-global 'list? list?)
    (define-global 'list list)
    (define-global 'length length)
    (define-global 'append append)
    (define-global 'reverse reverse)
    (define-global 'list-tail list-tail)
    (define-global 'list-ref list-ref)
    (define-global 'map map)
    (define-global 'for-each for-each)

    (define-global 'symbol? symbol?)    ; 11.10 Symbols
    (define-global 'symbol->string symbol->string)
    (define-global 'symbol=? symbol=?)
    (define-global 'string->symbol string->symbol)

    (define-global 'char? char?)        ; 11.11 Characters
    (define-global 'char->integer char->integer)
    (define-global 'integer->char integer->char)
    (define-global 'char=? char=?)
    (define-global 'char<? char<?)
    (define-global 'char>? char>?)
    (define-global 'char<=? char<=?)
    (define-global 'char>=? char>=?)

    (define-global 'string? string?)    ; 11.12 Strings
    (define-global 'make-string make-string)
    (define-global 'string string)
    (define-global 'string-length string-length)
    (define-global 'string-ref string-ref)
    (define-global 'string=? string=?)
    (define-global 'string<? string<?)
    (define-global 'string<=? string<=?)
    (define-global 'string>=? string>=?)
    (define-global 'substring substring)
    (define-global 'string-append string-append)
    (define-global 'string->list string->list)
    (define-global 'list->string list->string)
    (define-global 'string-for-each string-for-each)
    (define-global 'string-copy string-copy)

    (define-global 'vector? vector?)    ; 11.13 Vectors
    (define-global 'make-vector make-vector)
    (define-global 'vector vector)
    (define-global 'vector-length vector-length)
    (define-global 'vector-ref vector-ref)
    (define-global 'vector-set! vector-set!)
    (define-global 'vector->list vector->list)
    (define-global 'list->vector list->vector)
    (define-global 'vector-fill! vector-fill!)
    (define-global 'vector-map vector-map)
    (define-global 'vector-for-each vector-for-each)

    (define-global 'error error)        ; 11.14 Errors and violations
    (define-global 'assertion-violation assertion-violation)

    (define-global 'apply apply)        ; 11.15 Control features
    (define-global 'call-with-current-continuation call-with-current-continuation)
    (define-global 'call/cc call/cc)
    (define-global 'values values)
    (define-global 'call-with-values call-with-values)
    (define-global 'dynamic-wind dynamic-wind)

    ;; (rnrs unicode) library

    (define-global 'char-upcase char-upcase)
    (define-global 'char-downcase char-downcase)
    (define-global 'char-titlecase char-titlecase)
    (define-global 'char-foldcase char-foldcase)
    (define-global 'char-ci=? char-ci=?)
    (define-global 'char-ci<? char-ci<?)
    (define-global 'char-ci>? char-ci>?)
    (define-global 'char-ci<=? char-ci<=?)
    (define-global 'char-ci>=? char-ci>=?)
    (define-global 'char-alphabetic? char-alphabetic?)
    (define-global 'char-numeric? char-numeric?)
    (define-global 'char-whitespace? char-whitespace?)
    (define-global 'char-upper-case? char-upper-case?)
    (define-global 'char-lower-case? char-lower-case?)
    (define-global 'char-title-case? char-title-case?)
    (define-global 'char-general-category char-general-category)
    (define-global 'string-upcase string-upcase)
    (define-global 'string-downcase string-downcase)
    (define-global 'string-titlecase string-titlecase)
    (define-global 'string-foldcase string-foldcase)
    (define-global 'string-ci=? string-ci=?)
    (define-global 'string-ci<? string-ci<?)
    (define-global 'string-ci>? string-ci>?)
    (define-global 'string-ci<=? string-ci<=?)
    (define-global 'string-ci>=? string-ci>=?)
    (define-global 'string-normalize-nfd string-normalize-nfd)
    (define-global 'string-normalize-nfkd string-normalize-nfkd)
    (define-global 'string-normalize-nfc string-normalize-nfc)
    (define-global 'string-normalize-nfkc string-normalize-nfkc)

    ;; (rnrs bytevectors) library

    (define-global 'native-endianness native-endianness)
    (define-global 'bytevector? bytevector?)
    (define-global 'make-bytevector make-bytevector)
    (define-global 'bytevector-length bytevector-length)
    (define-global 'bytevector=? bytevector=?)
    (define-global 'bytevector-fill! bytevector-fill!)
    (define-global 'bytevector-copy! bytevector-copy!)
    (define-global 'bytevector-copy bytevector-copy)
    (define-global 'bytevector-u8-ref bytevector-u8-ref)
    (define-global 'bytevector-s8-ref bytevector-s8-ref)
    (define-global 'bytevector-u8-set! bytevector-u8-set!)
    (define-global 'bytevector-s8-set! bytevector-s8-set!)
    (define-global 'bytevector->u8-list bytevector->u8-list)
    (define-global 'u8-list->bytevector u8-list->bytevector)
    (define-global 'bytevector-uint-ref bytevector-uint-ref)
    (define-global 'bytevector-sint-ref bytevector-sint-ref)
    (define-global 'bytevector-uint-set! bytevector-uint-set!)
    (define-global 'bytevector-sint-set! bytevector-sint-set!)
    (define-global 'bytevector->uint-list bytevector->uint-list)
    (define-global 'uint-list->bytevector uint-list->bytevector)
    (define-global 'bytevector-u16-ref bytevector-u16-ref)
    (define-global 'bytevector-s16-ref bytevector-s16-ref)
    (define-global 'bytevector-u16-native-ref bytevector-u16-native-ref)
    (define-global 'bytevector-s16-native-ref bytevector-s16-native-ref)
    (define-global 'bytevector-u16-set! bytevector-u16-set!)
    (define-global 'bytevector-s16-set! bytevector-s16-set!)
    (define-global 'bytevector-u16-native-set! bytevector-u16-native-set!)
    (define-global 'bytevector-s16-native-set! bytevector-s16-native-set!)
    (define-global 'bytevector-u32-ref bytevector-u32-ref)
    (define-global 'bytevector-s32-ref bytevector-s32-ref)
    (define-global 'bytevector-u32-native-ref bytevector-u32-native-ref)
    (define-global 'bytevector-s32-native-ref bytevector-s32-native-ref)
    (define-global 'bytevector-u32-set! bytevector-u32-set!)
    (define-global 'bytevector-s32-set! bytevector-s32-set!)
    (define-global 'bytevector-u32-native-set! bytevector-u32-native-set!)
    (define-global 'bytevector-s32-native-set! bytevector-s32-native-set!)
    (define-global 'bytevector-u64-ref bytevector-u64-ref)
    (define-global 'bytevector-s64-ref bytevector-s64-ref)
    (define-global 'bytevector-u64-native-ref bytevector-u64-native-ref)
    (define-global 'bytevector-s64-native-ref bytevector-s64-native-ref)
    (define-global 'bytevector-u64-set! bytevector-u64-set!)
    (define-global 'bytevector-s64-set! bytevector-s64-set!)
    (define-global 'bytevector-u64-native-set! bytevector-u64-native-set!)
    (define-global 'bytevector-s64-native-set! bytevector-s64-native-set!)
    (define-global 'bytevector-ieee-single-native-ref bytevector-ieee-single-native-ref)
    (define-global 'bytevector-ieee-single-ref bytevector-ieee-single-ref)
    (define-global 'bytevector-ieee-double-native-ref bytevector-ieee-double-native-ref)
    (define-global 'bytevector-ieee-double-ref bytevector-ieee-double-ref)
    (define-global 'bytevector-ieee-single-native-set! bytevector-ieee-single-native-set!)
    (define-global 'bytevector-ieee-single-set! bytevector-ieee-single-set!)
    (define-global 'bytevector-ieee-double-native-set! bytevector-ieee-double-native-set!)
    (define-global 'bytevector-ieee-double-set! bytevector-ieee-double-set!)
    (define-global 'string->utf8 string->utf8)
    (define-global 'string->utf16 string->utf16)
    (define-global 'string->utf32 string->utf32)
    (define-global 'utf8->string utf8->string)
    (define-global 'utf16->string utf16->string)
    (define-global 'utf32->string utf32->string)

    ;; (rnrs lists) library

    (define-global 'find find)
    (define-global 'for-all for-all)
    (define-global 'exists exists)
    (define-global 'filter filter)
    (define-global 'partition partition)
    (define-global 'fold-left fold-left)
    (define-global 'fold-right fold-right)
    (define-global 'remp remp)
    (define-global 'remove remove)
    (define-global 'remv remv)
    (define-global 'remq remq)
    (define-global 'memp memp)
    (define-global 'member member)
    (define-global 'memv memv)
    (define-global 'memq memq)
    (define-global 'assp assp)
    (define-global 'assoc assoc)
    (define-global 'assv assv)
    (define-global 'assq assq)
    (define-global 'cons* cons*)

    ;; (rnrs sorting) library

    (define-global 'list-sort list-sort)
    (define-global 'vector-sort vector-sort)
    (define-global 'vector-sort! vector-sort!)

    ;; (rnrs records procedural) library

    (define-global 'make-record-type-descriptor make-record-type-descriptor)
    (define-global 'record-type-descriptor? record-type-descriptor?)
    (define-global 'make-record-constructor-descriptor make-record-constructor-descriptor)
    (define-global 'record-constructor record-constructor)
    (define-global 'record-predicate record-predicate)
    (define-global 'record-accessor record-accessor)
    (define-global 'record-mutator record-mutator)

    ;; (rnrs records inspection) library

    (define-global 'record? record?)
    (define-global 'record-rtd record-rtd)
    (define-global 'record-type-name record-type-name)
    (define-global 'record-type-parent record-type-parent)
    (define-global 'record-type-uid record-type-uid)
    (define-global 'record-type-generative? record-type-generative?)
    (define-global 'record-type-sealed? record-type-sealed?)
    (define-global 'record-type-opaque? record-type-opaque?)
    (define-global 'record-type-field-names record-type-field-names)
    (define-global 'record-field-mutable? record-field-mutable?)

    ;; (rnrs exceptions) library

    (define-global 'with-exception-handler with-exception-handler)
    (define-global 'raise raise)
    (define-global 'raise-continuable raise-continuable)

    ;; (rnrs conditions) library

    (define-global 'condition condition)
    (define-global 'simple-conditions simple-conditions)
    (define-global 'condition? condition?)
    (define-global 'condition-predicate condition-predicate)
    (define-global 'condition-accessor condition-accessor)
    (define-global 'make-message-condition make-message-condition)
    (define-global 'message-condition? message-condition?)
    (define-global 'condition-message condition-message)
    (define-global 'make-warning make-warning)
    (define-global 'warning? warning?)
    (define-global 'make-serious-condition make-serious-condition)
    (define-global 'serious-condition? serious-condition?)
    (define-global 'make-error make-error)
    (define-global 'error? error?)
    (define-global 'make-violation make-violation)
    (define-global 'violation? violation?)
    (define-global 'make-assertion-violation make-assertion-violation)
    (define-global 'assertion-violation? assertion-violation?)
    (define-global 'make-irritants-condition make-irritants-condition)
    (define-global 'irritants-condition? irritants-condition?)
    (define-global 'condition-irritants condition-irritants)
    (define-global 'make-who-condition make-who-condition)
    (define-global 'who-condition? who-condition?)
    (define-global 'condition-who condition-who)
    (define-global 'make-non-continuable-violation make-non-continuable-violation)
    (define-global 'non-continuable-violation? non-continuable-violation?)
    (define-global 'make-implementation-restriction-violation make-implementation-restriction-violation)
    (define-global 'make-lexical-violation make-lexical-violation)
    (define-global 'lexical-violation? lexical-violation?)
    (define-global 'make-syntax-violation make-syntax-violation)
    (define-global 'syntax-violation? syntax-violation?)
    (define-global 'syntax-violation-form syntax-violation-form)
    (define-global 'syntax-violation-subform syntax-violation-subform)
    (define-global 'make-undefined-violation make-undefined-violation)
    (define-global 'undefined-violation? undefined-violation?)

    ;; (rnrs io ports) library

    (define-global 'make-i/o-error make-i/o-error)
    (define-global 'i/o-error? i/o-error?)
    (define-global 'make-i/o-read-error make-i/o-read-error)
    (define-global 'i/o-read-error? i/o-read-error?)
    (define-global 'make-i/o-write-error make-i/o-write-error)
    (define-global 'i/o-write-error? i/o-write-error?)
    (define-global 'make-i/o-invalid-position-error make-i/o-invalid-position-error)
    (define-global 'i/o-invalid-position-error? i/o-invalid-position-error?)
    (define-global 'i/o-error-position i/o-error-position)
    (define-global 'make-i/o-filename-error make-i/o-filename-error)
    (define-global 'i/o-filename-error? i/o-filename-error?)
    (define-global 'i/o-error-filename i/o-error-filename)
    (define-global 'make-i/o-file-protection-error make-i/o-file-protection-error)
    (define-global 'i/o-file-protection-error? i/o-file-protection-error?)
    (define-global 'make-i/o-file-is-read-only-error make-i/o-file-is-read-only-error)
    (define-global 'i/o-file-is-read-only-error? i/o-file-is-read-only-error?)
    (define-global 'make-i/o-file-already-exists-error make-i/o-file-already-exists-error)
    (define-global 'i/o-file-already-exists-error? i/o-file-already-exists-error?)
    (define-global 'make-i/o-file-does-not-exist-error make-i/o-file-does-not-exist-error)
    (define-global 'i/o-file-does-not-exist-error? i/o-file-does-not-exist-error?)
    (define-global 'make-i/o-port-error make-i/o-port-error)
    (define-global 'i/o-port-error? i/o-port-error?)
    (define-global 'i/o-error-port i/o-error-port)
    (define-global 'buffer-mode? buffer-mode?)
    (define-global 'latin-1-codec latin-1-codec)
    (define-global 'utf-8-codec utf-8-codec)
    (define-global 'utf-16-codec utf-16-codec)
    (define-global 'native-eol-style native-eol-style)
    (define-global 'make-i/o-decoding-error make-i/o-decoding-error)
    (define-global 'i/o-decoding-error? i/o-decoding-error?)
    (define-global 'make-i/o-encoding-error make-i/o-encoding-error)
    (define-global 'i/o-encoding-error? i/o-encoding-error?)
    (define-global 'i/o-encoding-error-char i/o-encoding-error-char)
    (define-global 'make-transcoder make-transcoder)
    (define-global 'native-transcoder native-transcoder)
    (define-global 'transcoder-codec transcoder-codec)
    (define-global 'transcoder-eol-style transcoder-eol-style)
    (define-global 'transcoder-error-handling-mode transcoder-error-handling-mode)
    (define-global 'bytevector->string bytevector->string)
    (define-global 'string->bytevector string->bytevector)
    (define-global 'eof-object eof-object)
    (define-global 'eof-object? eof-object?)
    (define-global 'port? port?)
    (define-global 'port-transcoder port-transcoder)
    (define-global 'textual-port? textual-port?)
    (define-global 'binary-port? binary-port?)
    (define-global 'transcoded-port transcoded-port)
    (define-global 'port-has-port-position? port-has-port-position?)
    (define-global 'port-position port-position)
    (define-global 'port-has-set-port-position!? port-has-set-port-position!?)
    (define-global 'set-port-position! set-port-position!)
    (define-global 'close-port close-port)
    (define-global 'call-with-port call-with-port)
    (define-global 'input-port? input-port?)
    (define-global 'port-eof? port-eof?)
    (define-global 'open-file-input-port open-file-input-port)
    (define-global 'open-bytevector-input-port open-bytevector-input-port)
    (define-global 'open-string-input-port open-string-input-port)
    (define-global 'standard-input-port standard-input-port)
    (define-global 'current-input-port current-input-port)
    (define-global 'make-custom-binary-input-port make-custom-binary-input-port)
    (define-global 'make-custom-textual-input-port make-custom-textual-input-port)
    (define-global 'get-u8 get-u8)
    (define-global 'lookahead-u8 lookahead-u8)
    (define-global 'get-bytevector-n get-bytevector-n)
    (define-global 'get-bytevector-n! get-bytevector-n!)
    (define-global 'get-bytevector-some get-bytevector-some)
    (define-global 'get-bytevector-all get-bytevector-all)
    (define-global 'get-char get-char)
    (define-global 'lookahead-char lookahead-char)
    (define-global 'get-string-n get-string-n)
    (define-global 'get-string-n! get-string-n!)
    (define-global 'get-string-all get-string-all)
    (define-global 'get-line get-line)
    (define-global 'get-datum get-datum)
    (define-global 'output-port? output-port?)
    (define-global 'flush-output-port flush-output-port)
    (define-global 'output-port-buffer-mode output-port-buffer-mode)
    (define-global 'open-file-output-port open-file-output-port)
    (define-global 'open-bytevector-output-port open-bytevector-output-port)
    (define-global 'call-with-bytevector-output-port call-with-bytevector-output-port)
    (define-global 'open-string-output-port open-string-output-port)
    (define-global 'call-with-string-output-port call-with-string-output-port)
    (define-global 'standard-output-port standard-output-port)
    (define-global 'standard-error-port standard-error-port)
    (define-global 'current-output-port current-output-port)
    (define-global 'current-error-port current-error-port)
    (define-global 'make-custom-binary-output-port make-custom-binary-output-port)
    (define-global 'make-custom-textual-output-port make-custom-textual-output-port)
    (define-global 'put-u8 put-u8)
    (define-global 'put-bytevector put-bytevector)
    (define-global 'put-char put-char)
    (define-global 'put-string put-string)
    (define-global 'put-datum put-datum)
    (define-global 'open-file-input/output-port open-file-input/output-port)
    (define-global 'make-custom-binary-input/output-port make-custom-binary-input/output-port)
    (define-global 'make-custom-textual-input/output-port make-custom-textual-input/output-port)

    ;; (rnrs io simple) library

    (define-global 'eof-object eof-object)
    (define-global 'eof-object? eof-object?)
    (define-global 'call-with-input-file call-with-input-file)
    (define-global 'call-with-output-file call-with-output-file)
    (define-global 'input-port? input-port?)
    (define-global 'output-port? output-port?)
    (define-global 'current-input-port current-input-port)
    (define-global 'current-output-port current-output-port)
    (define-global 'current-error-port current-error-port)
    (define-global 'with-input-from-file with-input-from-file)
    (define-global 'with-output-to-file with-output-to-file)
    (define-global 'open-input-file open-input-file)
    (define-global 'open-output-file open-output-file)
    (define-global 'close-input-port close-input-port)
    (define-global 'close-output-port close-output-port)
    (define-global 'read-char read-char)
    (define-global 'peek-char peek-char)
    (define-global 'read read)
    (define-global 'write-char write-char)
    (define-global 'newline newline)
    (define-global 'display display)
    (define-global 'write write)

    ;; (rnrs files) library

    (define-global 'file-exists? file-exists?)
    (define-global 'delete-file delete-file)

    ;; (rnrs programs) library

    (define-global 'command-line command-line)
    (define-global 'exit exit)

    ;; (rnrs arithmetic fixnums) library

    (define-global 'fixnum? fixnum?)
    (define-global 'fixnum-width fixnum-width)
    (define-global 'least-fixnum least-fixnum)
    (define-global 'greatest-fixnum greatest-fixnum)
    (define-global 'fx=? fx=?)
    (define-global 'fx>? fx>?)
    (define-global 'fx<? fx<?)
    (define-global 'fx>=? fx>=?)
    (define-global 'fx<=? fx<=?)
    (define-global 'fxzero? fxzero?)
    (define-global 'fxpositive? fxpositive?)
    (define-global 'fxnegative? fxnegative?)
    (define-global 'fxodd? fxodd?)
    (define-global 'fxeven? fxeven?)
    (define-global 'fxmax fxmax)
    (define-global 'fxmin fxmin)
    (define-global 'fx+ fx+)
    (define-global 'fx* fx*)
    (define-global 'fx- fx-)
    (define-global 'fxdiv-and-mod fxdiv-and-mod)
    (define-global 'fxdiv fxdiv)
    (define-global 'fxmod fxmod)
    (define-global 'fxdiv0-and-mod0 fxdiv0-and-mod0)
    (define-global 'fxdiv0 fxdiv0)
    (define-global 'fxmod0 fxmod0)
    (define-global 'fx+/carry fx+/carry)
    (define-global 'fx-/carry fx-/carry)
    (define-global 'fx*/carry fx*/carry)
    (define-global 'fxnot fxnot)
    (define-global 'fxand fxand)
    (define-global 'fxior fxior)
    (define-global 'fxxor fxxor)
    (define-global 'fxif fxif)
    (define-global 'fxbit-count fxbit-count)
    (define-global 'fxlength fxlength)
    (define-global 'fxfirst-bit-set fxfirst-bit-set)
    (define-global 'fxbit-set? fxbit-set?)
    (define-global 'fxcopy-bit fxcopy-bit)
    (define-global 'fxbit-field fxbit-field)
    (define-global 'fxcopy-bit-field fxcopy-bit-field)
    (define-global 'fxarithmetic-shift fxarithmetic-shift)
    (define-global 'fxarithmetic-shift-left fxarithmetic-shift-left)
    (define-global 'fxarithmetic-shift-right fxarithmetic-shift-right)
    (define-global 'fxrotate-bit-field fxrotate-bit-field)
    (define-global 'fxreverse-bit-field fxreverse-bit-field)

    ;; (rnrs arithmetic flonums) library

    (define-global 'flonum? flonum?)
    (define-global 'real->flonum real->flonum)
    (define-global 'fl=? fl=?)
    (define-global 'fl<? fl<?)
    (define-global 'fl<=? fl<=?)
    (define-global 'fl>? fl>?)
    (define-global 'fl>=? fl>=?)
    (define-global 'flinteger? flinteger?)
    (define-global 'flzero? flzero?)
    (define-global 'flpositive? flpositive?)
    (define-global 'flnegative? flnegative?)
    (define-global 'flodd? flodd?)
    (define-global 'fleven? fleven?)
    (define-global 'flfinite? flfinite?)
    (define-global 'flinfinite? flinfinite?)
    (define-global 'flnan? flnan?)
    (define-global 'flmax flmax)
    (define-global 'flmin flmin)
    (define-global 'fl+ fl+)
    (define-global 'fl* fl*)
    (define-global 'fl- fl-)
    (define-global 'fl/ fl/)
    (define-global 'flabs flabs)
    (define-global 'fldiv-and-mod fldiv-and-mod)
    (define-global 'fldiv fldiv)
    (define-global 'flmod flmod)
    (define-global 'fldiv0-and-mod0 fldiv0-and-mod0)
    (define-global 'fldiv0 fldiv0)
    (define-global 'flmod0 flmod0)
    (define-global 'flnumerator flnumerator)
    (define-global 'fldenominator fldenominator)
    (define-global 'flfloor flfloor)
    (define-global 'flceiling flceiling)
    (define-global 'fltruncate fltruncate)
    (define-global 'flround flround)
    (define-global 'flexp flexp)
    (define-global 'fllog fllog)
    (define-global 'fllog fllog)
    (define-global 'flsin flsin)
    (define-global 'flcos flcos)
    (define-global 'fltan fltan)
    (define-global 'flasin flasin)
    (define-global 'flacos flacos)
    (define-global 'flatan flatan)
    (define-global 'flatan flatan)
    (define-global 'flsqrt flsqrt)
    (define-global 'flexpt flexpt)
    (define-global 'make-no-infinities-violation make-no-infinities-violation)
    (define-global 'no-infinities-violation? no-infinities-violation?)
    (define-global 'make-no-nans-violation make-no-nans-violation)
    (define-global 'no-nans-violation? no-nans-violation?)
    (define-global 'fixnum->flonum fixnum->flonum)

    ;; (rnrs arithmetic bitwise) library

    (define-global 'bitwise-not bitwise-not)
    (define-global 'bitwise-and bitwise-and)
    (define-global 'bitwise-ior bitwise-ior)
    (define-global 'bitwise-xor bitwise-xor)
    (define-global 'bitwise-if bitwise-if)
    (define-global 'bitwise-bit-count bitwise-bit-count)
    (define-global 'bitwise-length bitwise-length)
    (define-global 'bitwise-first-bit-set bitwise-first-bit-set)
    (define-global 'bitwise-bit-set? bitwise-bit-set?)
    (define-global 'bitwise-copy-bit bitwise-copy-bit)
    (define-global 'bitwise-bit-field bitwise-bit-field)
    (define-global 'bitwise-copy-bit-field bitwise-copy-bit-field)
    (define-global 'bitwise-arithmetic-shift bitwise-arithmetic-shift)
    (define-global 'bitwise-arithmetic-shift-left bitwise-arithmetic-shift-left)
    (define-global 'bitwise-arithmetic-shift-right bitwise-arithmetic-shift-right)
    (define-global 'bitwise-rotate-bit-field bitwise-rotate-bit-field)
    (define-global 'bitwise-reverse-bit-field bitwise-reverse-bit-field)

    ;; (rnrs syntax-case) library

    (define-global 'make-variable-transformer make-variable-transformer)
    (define-global 'identifier? identifier?)
    (define-global 'bound-identifier=? bound-identifier=?)
    (define-global 'free-identifier=? free-identifier=?)
    (define-global 'syntax->datum syntax->datum)
    (define-global 'datum->syntax datum->syntax)
    (define-global 'generate-temporaries generate-temporaries)
    (define-global 'syntax-violation syntax-violation)

    ;; (rnrs hashtables) library

    (define-global 'make-eq-hashtable make-eq-hashtable)
    (define-global 'make-eqv-hashtable make-eqv-hashtable)
    (define-global 'make-hashtable make-hashtable)
    (define-global 'hashtable? hashtable?)
    (define-global 'hashtable-size hashtable-size)
    (define-global 'hashtable-ref hashtable-ref)
    (define-global 'hashtable-set! hashtable-set!)
    (define-global 'hashtable-delete! hashtable-delete!)
    (define-global 'hashtable-contains? hashtable-contains?)
    (define-global 'hashtable-update! hashtable-update!)
    (define-global 'hashtable-copy hashtable-copy)
    (define-global 'hashtable-clear! hashtable-clear!)
    (define-global 'hashtable-keys hashtable-keys)
    (define-global 'hashtable-entries hashtable-entries)
    (define-global 'hashtable-equivalence-function hashtable-equivalence-function)
    (define-global 'hashtable-hash-function hashtable-hash-function)
    (define-global 'hashtable-mutable? hashtable-mutable?)
    (define-global 'equal-hash equal-hash)
    (define-global 'string-hash string-hash)
    (define-global 'string-ci-hash string-ci-hash)
    (define-global 'symbol-hash symbol-hash)

    ;; (rnrs enums) library

    (define-global 'make-enumeration make-enumeration)
    (define-global 'enum-set-universe enum-set-universe)
    (define-global 'enum-set-indexer enum-set-indexer)
    (define-global 'enum-set-constructor enum-set-constructor)
    (define-global 'enum-set->list enum-set->list)
    (define-global 'enum-set-member? enum-set-member?)
    (define-global 'enum-set-subset? enum-set-subset?)
    (define-global 'enum-set=? enum-set=?)
    (define-global 'enum-set-union enum-set-union)
    (define-global 'enum-set-intersection enum-set-intersection)
    (define-global 'enum-set-difference enum-set-difference)
    (define-global 'enum-set-complement enum-set-complement)
    (define-global 'enum-set-projection enum-set-projection)

    ;; ;; (rnrs eval) non-default library

    ;; (define-global 'eval eval)
    ;; (define-global 'environment environment)

    ;; ;; (rnrs mutable-pairs) non-default library

    ;; (define-global 'set-car! set-car!)
    ;; (define-global 'set-cdr! set-cdr!)

    ;; ;; (rnrs mutable-strings) non-default library

    ;; (define-global 'string-set! string-set!)
    ;; (define-global 'string-fill! string-fill!)

    ;; ;; (rnrs r5rs) non-default library

    ;; (define-global 'exact->inexact exact->inexact)
    ;; (define-global 'inexact->exact inexact->exact)
    ;; (define-global 'quotient quotient)
    ;; (define-global 'remainder remainder)
    ;; (define-global 'modulo modulo)
    ;; (define-global 'force force)
    ;; (define-global 'null-environment null-environment)
    ;; (define-global 'scheme-report-environment scheme-report-environment)
    )

  (define (initial-environment)
    (if (null? *global-env*)
        (define-globals))
    *global-env*)

) ; end library
