;; gen-libs - generate library interface files for rnrs compatibility.

(import (rnrs))

;; cat > lib/s3/rnrs/foo.sls <<\EOF
;;   (library (s3 rnrs foo (6))
;;    (export
;;     foo
;;     bar
;;     )
;;   (import (rnrs foo))
;;    ;# (Insert library body here.)
;;   ) ; end library (s3 rnrs foo (6))
;; EOF

(define-record-type lib (fields hdr default? exports))

(define (lib-header? form)
  (and (pair? form) (eq? (car form) 'rnrs)))

(define (collect-lib-exports p)
  (if (or (null? p) (lib-header? (car p)))
      '()
      (cons
       (cons (cadr p) (car p))
       (collect-lib-exports (cddr p)))))

(define (collect-lib p)
  (let ([hdr (car p)])
    (if (and (pair? (cdr p)) (symbol=? (cadr p) 'non-default))
        (make-lib hdr #f (collect-lib-exports (cddr p)))
        (make-lib hdr #t (collect-lib-exports (cdr p))))))

(define (collect-all data)
  (cond
   [(null? data) '()]
   [(not (pair? data)) (error "malformed data" data)]
   [(lib-header? (car data))
                 (cons (collect-lib data)
                       (collect-all (cdr data)))]
   [else (collect-all (cdr data))]))

(define (read-all port)
  (let next ([all '()])
    (let ([datum (read port)])
      (if (eof-object? datum)
          (reverse all)
          (next (cons datum all))))))

(define (print . args)
  (let next ([p args] [sep ""])
    (cond
     [(null? p)
      (newline)]
     [(pair? p)
      (display sep)
      (display (car p))
      (next (cdr p) " ")]
     [else
      (display " . ")
      (display p)
      (newline)])))

(define (list->path list)
  (fold-left
   (lambda (l r)
     (string-append l "/" (symbol->string r)))
   ""
   list))

(define (lib-filename lib)
  (let ([hdr (lib-hdr lib)])
    (if (equal? hdr '(rnrs))
        "s3/rnrs/main.sls"
        (string-append "s3"
                       (list->path (lib-hdr lib))
                       ".sls"))))

(define (dirname path)
  (list->string (reverse (cdr (member #\/ (reverse (string->list path)))))))

(define (lib-dirname lib)
  (dirname (lib-filename lib)))

(define (pad n s)
  (let ([len (string-length s)])
    (if (>= len n)
      s
      (string-append s (make-string (- n len) #\space)))))

(define (emit-export export)
  (let ([type (car export)]
        [name (symbol->string (cdr export))])

    (define (comment-out comment)
      (print (string-append ";;" (pad 38 name) ";; " comment)))

    (case (car export)
      [(procedure) (print " " name)]
      [(syntax) (comment-out "syntax")]
      [(auxiliary-syntax) #f]
      [(syntax-expand) (comment-out "syntax (expand)")]
      [(auxiliary-syntax-expand) #f]
      [(condition-type) (comment-out "condition-type")]
      [else (error emit-export "unknown type" type)])))

(define (emit-lib lib)
  (let ([lib-name (append '(s3) (lib-hdr lib) '((6)))])
    (print "mkdir -p" (lib-dirname lib))
    (print "cat >" (lib-filename lib) "<<\\EOF")
    (print ";; Automatically generated by gen-libs")
    (print)
    (print "(library" lib-name)
    (print " (export")
    (for-each emit-export (lib-exports lib))
    (print " )");
    (print "" `(import ,(lib-hdr lib)))
    (print " #; (Insert library body here.)")
    (print ") ; end library" lib-name)
    (print "EOF")
    (print)))

(define (emit-composite-lib libs)
  (let* ([hdr '(rnrs)]
         [all-exports
          (fold-right append
                      '()
                      (map lib-exports
                           (filter lib-default? libs)))]
         [lib (make-lib hdr #f all-exports)])
    (emit-lib lib)))

;; (define (emit-composite-lib libs)
;;   (let* ([hdr '(rnrs)]
;;          [all-exports
;;           (fold-right append
;;                       '()
;;                       (map lib-exports
;;                            (filter lib-default? libs)))]
;;          [lib (make-lib hdr #f all-exports)])
;;     (print "mkdir -p" (lib-dirname lib))
;;     (print "cat >" (lib-filename lib) "<<\\EOF")
;;     (print ";; Automatically generated by gen-libs")
;;     (print)
;;     (print "(library" (append '(s3) (lib-hdr lib) '((6))))
;;     (print " (exports")
;;     (for-each emit-export (lib-exports lib))
;;     (print " )");
;;     (print "" `(imports ,(lib-hdr lib)))
;;     (print)
;;     (print " #;(Insert body here.)")
;;     (print)
;;     (print ")");
;;     (print "EOF")
;;     (print)))

(define (gen-all data)
  (let ([libs (collect-all data)])
    (for-each emit-lib libs)
    (emit-composite-lib libs)))

(define (usage port)
  (display "Use: gen-libs [defs]" port)
  (newline port)
  (exit (not (eq? port (current-error-port)))))

(define (main)
  (let ([argv (command-line)])
    (case (length argv)
      [(1) (gen-all (read-all (current-input-port)))]
      [(2) (gen-all (call-with-input-file
                        (list-ref argv 1)
                        read-all))]
      [else (usage (current-error-port))])))

(main)
